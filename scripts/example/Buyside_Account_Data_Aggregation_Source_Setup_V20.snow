--#########################################################
-- EXEC REPORT: BUYSIDE AGGREGATION SOURCE SETUP SCRIPT
--#########################################################
--
-- This section is to accept snowSQL client params. skip it for manual run
--
!define ver=V20;
!set variable_substitution=true;
--
use schema &{db_name}.&{sc_name};
set Environmet = '&{wk_env}';
set Reprocess = &{re_pro};
!set variable_substitution=false;
-----------------------------------------------------------
-- Setup the execution environment
-----------------------------------------------------------
--
-- If run script manually in web UI, set the environment params following thid section
--
-- USE SCHEMA BI_TEST._CONTROL_LOGIC; 	-- for test DB 
-- USE SCHEMA BI._CONTROL_LOGIC; 		-- for prod DB
--
-- Set "Reprocess" to true if reload the data from '2020-01-01'
--
SET (Environmet, Reprocess) = ('test', FALSE);  -- "Environmet" option is not in use yet
--
-- Setup the script change scope by commenting out the no change sources to prevent from the wrong changes.
--
CREATE OR REPLACE TEMPORARY TABLE CHANGE_ALLOWED (SOURCE_DATA VARCHAR);
INSERT OVERWRITE INTO CHANGE_ALLOWED VALUES (NULL)
	,('BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY')							-- BI-998
	,('BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW')								-- BI-1034 (provider 99,  network 57)
	,('DATAMART.BUYSIDE_NETWORK.FACEBOOK_AD_ACCOUNT_PERFORMANCE_DAILY')				-- BI-1317 (provider 2,   network 13)
	,('DATAMART.BUYSIDE_NETWORK.OUTBRAIN_PUBLISHER_PERFORMANCE_DAILY')				-- BI-1317 (provider 3,   network 2)
	,('DATAMART.BUYSIDE_NETWORK.TABOOLA_CAMPAIGN_SUMMARY_PERFORMANCE_DAILY')		-- BI-1317 (provider 4,   network 12)
	,('DATAMART.BUYSIDE_NETWORK.REVCONTENT_BOOST_WIDGETS_PERFORMANCE_DAILY')		-- BI-1317 (provider 5,   network 5)
	,('DATAMART.BUYSIDE_NETWORK.YAHOO_GEMINI_CAMPAIGN_BID_PERFORMANCE_DAILY')		-- BI-1317 (provider 6,   network 15)
	,('DATAMART.BUYSIDE_NETWORK.GOOGLE_ADWORDS_CAMPAIGN_PERFORMANCE_DAILY')			-- BI-1317 (provider 11,  network 1)
	,('DATAMART.BUYSIDE_NETWORK.BING_ADCENTER_CAMPAIGN_PERFORMANCE_DAILY')			-- BI-1317 (provider 12,  network 7)
	,('DATAMART.BUYSIDE_NETWORK.SNAPCHAT_AD_HOUR_PERFORMANCE_HOURLY')				-- BI-1317 (provider 15,  network 14)
	,('DATAMART.BUYSIDE_NETWORK.ZEMANTA_ACCOUNT_PERFORMANCE_DAILY')					-- BI-1317 (provider 25,  network 16)
	,('DATAMART.BUYSIDE_NETWORK.APPNEXUS_ADVERTISER_NETWORK_ADVERTISER_DAILY')		-- BI-1317 (provider 58,  network 10)
	,('DATAMART.BUYSIDE_NETWORK.DIANOMI_AD_PERFORMANCE_DAILY')						-- BI-1317 (provider 96,  network 50)
	,('DATAMART.BUYSIDE_NETWORK.THRYV_SPEND_PERFORMANCE_DAILY')						-- BI-1317 (provider 51,  network 45)
	,('DATAMART.BUYSIDE_NETWORK.BEESWAX_WINS')										-- BI-1317 (provider 100, network 68)
	,('DATAMART.BUYSIDE_NETWORK.ADVERTISE_COM_CAMPAIGN_PERFORMANCE_DAILY')			-- BI-1317 (provider 63,  network 28)
	,('DATAMART.BUYSIDE_NETWORK.ADMEDIA_CAMPAIGN_PERFORMANCE_DAILY')				-- BI-1317 (provider 1,   network 60)
;
--
-- SELECT $Reprocess, SOURCE_DATA FROM CHANGE_ALLOWED WHERE SOURCE_DATA IS NOT NULL;
--
--=========================================================
-- Schedule 1: Change preparation and Setting check-up
--=========================================================
--
-----------------------------------------------------------
-- Check the task idle time window avialbility for changes (prod DB only)
-----------------------------------------------------------
--SELECT CASE DATEDIFF(HOUR, COMPLETED_TIME, CURRENT_TIMESTAMP) WHEN 0 THEN 'OK' ELSE 'WAIT' END DOABLE
--    ,DATEDIFF(MINUTE, CURRENT_TIMESTAMP, DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME))) NEXT_SCHEDULE_IN_MINUTES
--    ,DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME)) NEXT_SCHEDULE_TIME 
--    ,COMPLETED_TIME LAST_COMPLETION_TIME
--    ,CURRENT_TIMESTAMP
--FROM _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME;
--
-----------------------------------------------------------
-- Suspend the snow tasks if change takes long time (prod DB only)
-----------------------------------------------------------
-- ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
-- SHOW TASKS;
--
-----------------------------------------------------------
-- visual check the all existing sources
-----------------------------------------------------------
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING';
--
--=========================================================
-- Schedule 2: Remove the not needed sources
--=========================================================
--
-----------------------------------------------------------
-- Step 1: Take the source off-line, then do step 2 after a couple of days
-----------------------------------------------------------
--UPDATE DATA_AGGREGATION_SOURCES S
--SET S.SOURCE_ENABLED = NULL
--FROM DATA_AGGREGATION_TARGETS D
--WHERE S.TARGET_ID = D.TARGET_ID
--AND D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
--AND S.SOURCE_DATA IN ('<replace_with_source_data_name>');
--
-----------------------------------------------------------
-- Step 2: Remove the not needed sources after confirmed with step 1
-----------------------------------------------------------
--DELETE FROM DATA_AGGREGATION_SOURCES S
--USING DATA_AGGREGATION_TARGETS D
--WHERE S.TARGET_ID = D.TARGET_ID
--AND D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
--AND S.SOURCE_DATA IN ('<replace_with_source_data_name>');
--
--=========================================================
-- Schedule 3: Setup the individual sources
--=========================================================
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- manual entry spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-850
-- https://openmail.atlassian.net/browse/BI-910
-- https://openmail.atlassian.net/browse/BI-998
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-998: manual entry spend aggregation' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY'
			,$$
			-- manual entry spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(M.NETWORK_NAME_ID, AMM.NETWORK_NAME_ID) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(M.IMPRESSIONS, 0)) IMPRESSIONS,
					SUM(COALESCE(M.CLICKS, 0)) CLICKS,
					SUM(COALESCE(M.NATIVE_SPEND, 0)) SPEND
				FROM BI.MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY M
				LEFT JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND M.NETWORK_NAME_ID = AMM.NETWORK_NAME_ID
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- raw account spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-910
-- https://openmail.atlassian.net/browse/BI-1025
-- https://openmail.atlassian.net/browse/BI-1029
-- https://openmail.atlassian.net/browse/BI-1034
-- https://openmail.atlassian.net/browse/BI-1317
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P99,N57): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW'
			,$$
			-- raw spend aggregation for provider = 99 or network = 57
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			WITH RAW_DATA
			AS (
				SELECT DATA_TS::DATE DATA_DATE
					,CASE PROVIDER_ID WHEN 99 THEN COALESCE(GRAIN:site, 'Yahoo Search') ELSE ACCOUNT_ID END ACCOUNT_ID
					,PROVIDER_ID
					,COALESCE(METRICS:impressions::NUMBER, 0) IMPRESSIONS
					,COALESCE(METRICS:clicks::NUMBER, 0) CLICKS
					,COALESCE(METRICS:spend::NUMBER, 0) SPEND
				FROM BI.ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_RAW
				WHERE DATA_TS >= :1 AND DATA_TS < DATEADD(MINUTE, :2, :1)
					--AND (PROVIDER_ID != 51 OR (PROVIDER_ID = 51 AND DATA_TS < '2020-06-01')) -- exclude thryv spend as manual entry enabled
					AND PROVIDER_ID = 99 -- NOT IN (2,3,4,5,6,11,12,15,25,58,96,51,100,63,1)
					AND (
						COALESCE(METRICS:impressions::NUMBER, 0) != 0
						OR COALESCE(METRICS:clicks::NUMBER, 0) != 0
						OR COALESCE(METRICS:spend::NUMBER, 0) != 0
						)
				)
			SELECT S.DATA_DATE
				,PRODUCT_LINE_ID
				,BI_ACCOUNT_ID
				,NETWORK_NAME_ID
				,NETWORK_TYPE_ID
				,NULL::INT CONTRACT_ID
				,CURRENCY_CODE
				,COALESCE(EX.RATE, 1) CONVERSION_RATE
				,IMPRESSIONS
				,CLICKS
				,SPEND
			FROM (
				SELECT R.DATA_DATE
					,COALESCE(AMM.PRODUCT_LINE_ID,-1) PRODUCT_LINE_ID
					,COALESCE(AMM.BI_ACCOUNT_ID,-1) BI_ACCOUNT_ID
					,COALESCE(AMM.NETWORK_NAME_ID,PN.NETWORK_NAME_ID) NETWORK_NAME_ID
					,AMM.NETWORK_TYPE_ID
					,AMM.CURRENCY_CODE
					,SUM(COALESCE(IMPRESSIONS, 0)) IMPRESSIONS
					,SUM(COALESCE(CLICKS, 0)) CLICKS
					,SUM(COALESCE(SPEND, 0)) SPEND
				FROM RAW_DATA R
				LEFT JOIN BI.COMMON.PROVIDER_NETWORK_NAME_MAPPINGS PN
				ON R.PROVIDER_ID = PN.PROVIDER_ID
				LEFT JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM 
				ON R.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND R.PROVIDER_ID = AMM.PROVIDER_ID
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX 
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- facebook spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 2, network 13)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.FACEBOOK_AD_ACCOUNT_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P2,N13): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.FACEBOOK_AD_ACCOUNT_PERFORMANCE_DAILY'
			,$$
			-- facebook spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 13) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:inline_link_clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.FACEBOOK_AD_ACCOUNT_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 2
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
		  $$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- outbrain spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 3, network 2)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.OUTBRAIN_PUBLISHER_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P3,N2): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.OUTBRAIN_PUBLISHER_PERFORMANCE_DAILY'
			,$$
			-- outbrain spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 2) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend, '$'), ','), '')::FLOAT, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.OUTBRAIN_PUBLISHER_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 3
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- taboola spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 4, network 12)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.TABOOLA_CAMPAIGN_SUMMARY_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P4,N12): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.TABOOLA_CAMPAIGN_SUMMARY_PERFORMANCE_DAILY'
			,$$
			-- taboola spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 12) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					COALESCE(M.CURRENCY, AMM.CURRENCY_CODE) CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spent, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.TABOOLA_CAMPAIGN_SUMMARY_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 4
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- revcontent spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 5, network 5)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.REVCONTENT_BOOST_WIDGETS_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P5,N5): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.REVCONTENT_BOOST_WIDGETS_PERFORMANCE_DAILY'
			,$$
			-- revcontent spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 5) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend, '$'), ','), '')::FLOAT, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.REVCONTENT_BOOST_WIDGETS_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 5
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- yahoo_gimni spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 6, network 15)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.YAHOO_GEMINI_CAMPAIGN_BID_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P6,N15): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.YAHOO_GEMINI_CAMPAIGN_BID_PERFORMANCE_DAILY'
			,$$
			-- yahoo_gimni spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 15) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					COALESCE(M.ATTRIBUTES:advertiser_currency, AMM.CURRENCY_CODE) CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:cost, '$'), ','), '')::FLOAT, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.YAHOO_GEMINI_CAMPAIGN_BID_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 6
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- google_adwords spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 11, network 1)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.GOOGLE_ADWORDS_CAMPAIGN_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P11,N1): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.GOOGLE_ADWORDS_CAMPAIGN_PERFORMANCE_DAILY'
			,$$
			-- google_adwords spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 1) NETWORK_NAME_ID,
					-- M.NETWORK_TYPE,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend_micro, '$'), ','), '')::FLOAT/1000000, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.GOOGLE_ADWORDS_CAMPAIGN_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 11
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- bing_adcenter spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 12, network 7)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.BING_ADCENTER_CAMPAIGN_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P12,N7): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.BING_ADCENTER_CAMPAIGN_PERFORMANCE_DAILY'
			,$$
			-- bing_adcenter spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 7) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend, '$'), ','), '')::FLOAT, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.BING_ADCENTER_CAMPAIGN_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 12
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- snapchat spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 15, network 14)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.SNAPCHAT_AD_HOUR_PERFORMANCE_HOURLY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P15,N14): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.SNAPCHAT_AD_HOUR_PERFORMANCE_HOURLY'
			,$$
			-- snapchat spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 14) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					0::INT CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend_micro, '$'), ','), '')::FLOAT/1000000, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:swipes, '')::INT, 0)) SWIPES
				FROM DATAMART.BUYSIDE_NETWORK.SNAPCHAT_AD_HOUR_PERFORMANCE_HOURLY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 15
				--WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- zementa spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 25, network 16)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.ZEMANTA_ACCOUNT_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P25,N16): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.ZEMANTA_ACCOUNT_PERFORMANCE_DAILY'
			,$$
			-- zementa spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 16) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					COALESCE(M.METRICS:currency, AMM.CURRENCY_CODE) CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:"total spend", '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.ZEMANTA_ACCOUNT_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 25
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- appnexus_advertiser spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 58, network 10)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.APPNEXUS_ADVERTISER_NETWORK_ADVERTISER_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P58,N10): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.APPNEXUS_ADVERTISER_NETWORK_ADVERTISER_DAILY'
			,$$
			-- appnexus_advertiser spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 10) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:imps, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spend, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.APPNEXUS_ADVERTISER_NETWORK_ADVERTISER_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 58
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- dianomi spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 96, network 50)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.DIANOMI_AD_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P96,N50): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.DIANOMI_AD_PERFORMANCE_DAILY'
			,$$
			-- dianomi spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 50) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:cost, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.DIANOMI_AD_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 96
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- thryv spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 51, network 45)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.THRYV_SPEND_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P51,N45): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.THRYV_SPEND_PERFORMANCE_DAILY'
			,$$
			-- thryv spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 45) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					0::INT IMPRESSIONS,
					0::INT CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.SPEND, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.THRYV_SPEND_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 51
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
					AND M.DATA_TS < '2020-06-01' -- manual entry enabled from '2020-06-01'
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- beeswax spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 100, network 68)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.BEESWAX_WINS'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P100,N68): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.BEESWAX_WINS'
			,$$
			-- beeswax spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 68) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					COUNT(COALESCE(M.AUCTION_ID::VARCHAR, '0')) IMPRESSIONS,
					SUM(COALESCE(M.CLICKS, 0)) CLICKS,
					SUM(COALESCE(M.WIN_COST_MICROS_USD/1000000, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.BEESWAX_WINS M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ADVERTISER_ID = AMM.ACCOUNT_ID
					--ON M.ACCOUNT_ID::VARCHAR = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 100
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- advertiser_com spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 63, network 28)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.ADVERTISE_COM_CAMPAIGN_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P63,N28): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.ADVERTISE_COM_CAMPAIGN_PERFORMANCE_DAILY'
			,$$
			-- advertiser_com spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 28) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					0::INT IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spent, '$'), ','), '')::FLOAT, 0)) SPEND,
					SUM(COALESCE(NULLIF(M.METRICS:total_conversions, '')::INT, 0)) CONVERSIONS
				FROM DATAMART.BUYSIDE_NETWORK.ADVERTISE_COM_CAMPAIGN_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 63
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- admedia spend aggregation
-----------------------------------------------------------
-- https://openmail.atlassian.net/browse/BI-1317 (provider 1, network 60)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
-- visual check previous setting of same source
--
SELECT S.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED) CHANGE_ALLOWED, S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_DATA = 'DATAMART.BUYSIDE_NETWORK.ADMEDIA_CAMPAIGN_PERFORMANCE_DAILY'
;
--
-- Update or add the aggregation source
--
MERGE INTO DATA_AGGREGATION_SOURCES D
USING (
	SELECT A.*, B.TARGET_ID FROM (
		SELECT 'BI-1317(P1,N60): Aggregate the spend data from the DataMart views directly' SOURCE_LABEL
			,$1 TARGET_DATA
			,$2 SOURCE_DATA
			,False SOURCE_ENABLED
			,260 PATTERN_DEFAULT
			,False PATTERN_FLEXIBLE
			,DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1 SOURCE_READY_TIME
			,NULL SOURCE_CHECK_TIME
			,$3 TRANSFORMATION
		FROM VALUES (
			'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
			,'DATAMART.BUYSIDE_NETWORK.ADMEDIA_CAMPAIGN_PERFORMANCE_DAILY'
			,$$
			-- admedia spend aggregation
			-- under github - https://github.com/Openmail/BusinessIntelligence/blob/master/S1-Data-Aggregation-3-Account-Data/scripts/Buyside_Account_Data_Aggregation_Source_Setup_V20.snow
			SELECT S.DATA_DATE,
				PRODUCT_LINE_ID,
				BI_ACCOUNT_ID,
				NETWORK_NAME_ID,
				NETWORK_TYPE_ID,
				NULL::INT CONTRACT_ID,
				CURRENCY_CODE,
				COALESCE(EX.RATE, 1) CONVERSION_RATE,
				IMPRESSIONS,
				CLICKS,
				SPEND
			FROM (
				SELECT M.DATA_TS::DATE DATA_DATE,
					COALESCE(AMM.PRODUCT_LINE_ID, -1) PRODUCT_LINE_ID,
					COALESCE(AMM.BI_ACCOUNT_ID, -1) BI_ACCOUNT_ID,
					COALESCE(AMM.NETWORK_NAME_ID, 60) NETWORK_NAME_ID,
					AMM.NETWORK_TYPE_ID,
					AMM.CURRENCY_CODE,
					SUM(COALESCE(NULLIF(M.METRICS:impressions, '')::INT, 0)) IMPRESSIONS,
					SUM(COALESCE(NULLIF(M.METRICS:clicks, '')::INT, 0)) CLICKS,
					SUM(COALESCE(NULLIF(REPLACE(TRIM(M.METRICS:spent, '$'), ','), '')::FLOAT, 0)) SPEND
				FROM DATAMART.BUYSIDE_NETWORK.ADMEDIA_CAMPAIGN_PERFORMANCE_DAILY M
				JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM
					ON M.ACCOUNT_ID = AMM.ACCOUNT_ID
					AND AMM.PROVIDER_ID = 1
				WHERE M.DATA_TS >= :1 AND M.DATA_TS < DATEADD(MINUTE, :2, :1)
				GROUP BY 1,2,3,4,5,6
				) S
			LEFT JOIN DATAMART.COMMON.OPEN_EXCHANGE_RATES_HISTORICAL_RATES_DAILY EX
			ON S.DATA_DATE = EX.DATA_TS::DATE
				AND S.CURRENCY_CODE = EX.CURRENCY
			$$
		)
	) A JOIN DATA_AGGREGATION_TARGETS B USING(TARGET_DATA)
    WHERE A.SOURCE_DATA IN (SELECT SOURCE_DATA FROM CHANGE_ALLOWED)
) S
ON D.TARGET_ID = S.TARGET_ID AND D.SOURCE_DATA = S.SOURCE_DATA
WHEN MATCHED THEN UPDATE SET SOURCE_ID = D.SOURCE_ID
	,SOURCE_LABEL = S.SOURCE_LABEL
	--,TARGET_ID = S.TARGET_ID
	--,SOURCE_DATA = S.SOURCE_DATA
	,SOURCE_ENABLED = S.SOURCE_ENABLED
	,PATTERN_DEFAULT = S.PATTERN_DEFAULT
	,PATTERN_FLEXIBLE = S.PATTERN_FLEXIBLE
	,SOURCE_READY_TIME = S.SOURCE_READY_TIME
	,SOURCE_CHECK_TIME = S.SOURCE_CHECK_TIME
	,TRANSFORMATION = S.TRANSFORMATION
WHEN NOT MATCHED THEN INSERT (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
VALUES (
	SOURCE_LABEL
	,TARGET_ID
	,SOURCE_DATA
	,SOURCE_ENABLED
	,PATTERN_DEFAULT
	,PATTERN_FLEXIBLE
	,SOURCE_READY_TIME
	,SOURCE_CHECK_TIME
	,TRANSFORMATION
	)
;
--
--=========================================================
-- Schedule 4: Test teh new added or changed sources
--=========================================================
--
-----------------------------------------------------------
-- Goto the right db schema
-----------------------------------------------------------
-- USE SCHEMA BI_TEST._CONTROL_LOGIC; 	-- for test DB 
-- USE SCHEMA BI._CONTROL_LOGIC; 		-- for prod DB
--
-----------------------------------------------------------
-- Check the task idle time window avialbility for changes (prod DB only)
-----------------------------------------------------------
--SELECT CASE DATEDIFF(HOUR, COMPLETED_TIME, CURRENT_TIMESTAMP) WHEN 0 THEN 'OK' ELSE 'WAIT' END DOABLE
--    ,DATEDIFF(MINUTE, CURRENT_TIMESTAMP, DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME))) NEXT_SCHEDULE_IN_MINUTES
--    ,DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME)) NEXT_SCHEDULE_TIME 
--    ,COMPLETED_TIME LAST_COMPLETION_TIME
--    ,CURRENT_TIMESTAMP
--FROM _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME;
--
-----------------------------------------------------------
-- Suspend the snow tasks if change takes long time
-----------------------------------------------------------
-- ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
-- SHOW TASKS;
--
-----------------------------------------------------------
-- Truncate the event log for eaier check (test db only)
-----------------------------------------------------------
SELECT * FROM _CONTROL_LOGIC.DATA_AGGREGATION_LOGGING ORDER BY EVENT_TIME DESC LIMIT 25;
--TRUNCATE TABLE _CONTROL_LOGIC.DATA_AGGREGATION_LOGGING;
--
-----------------------------------------------------------
-- Clear existing data from stage stage table in test range
-----------------------------------------------------------
DELETE FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING
WHERE DATA_DATE >= DATEADD('MONTH', -1, DATE_TRUNC('MONTH', CURRENT_DATE()));
--
-----------------------------------------------------------
-- Make a test data generation
-----------------------------------------------------------
-- CALL DATA_AGGREGATOR ('<target table>', <script only>, <log details>, disabled only>, '<test date>');
CALL DATA_AGGREGATOR (
	'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING', --TARGET_DATA
	0, --SCRIPT_ONLY
	1, --LOG_DETAILS
	1, --NON_ENABLED
	DATEADD('MONTH', -1, DATE_TRUNC('MONTH', CURRENT_DATE())) --BATCH_TIMETAG
);
--
-----------------------------------------------------------
-- Check the event log for manual test
-----------------------------------------------------------
SELECT * 
FROM _CONTROL_LOGIC.DATA_AGGREGATION_LOGGING 
ORDER BY EVENT_TIME DESC 
LIMIT 25;
--
-----------------------------------------------------------
-- Check the manually generated test result
-----------------------------------------------------------
SELECT *
FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING
WHERE DATA_DATE > DATEADD('MONTH', -1, DATE_TRUNC('MONTH', CURRENT_DATE()))
LIMIT 15;
--
--=========================================================
-- Schedule 5: Test teh new added or changed sources
--=========================================================
--
-----------------------------------------------------------
-- Enable new added or changed sources ready for automation
-----------------------------------------------------------
UPDATE DATA_AGGREGATION_SOURCES S
SET S.SOURCE_ENABLED = True
FROM DATA_AGGREGATION_TARGETS D
WHERE S.TARGET_ID = D.TARGET_ID
AND D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND S.SOURCE_ENABLED = False;
--
-----------------------------------------------------------
-- Check the status of all sources
-----------------------------------------------------------
SELECT S.*
FROM DATA_AGGREGATION_SOURCES S
JOIN DATA_AGGREGATION_TARGETS D
USING (TARGET_ID)
WHERE D.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
ORDER BY 1,2,3;
--
--=========================================================
-- Schedule 6: Make a history data manual reprocess as needed
--=========================================================
--
-----------------------------------------------------------
-- Make sure no tasks are running (prod DB only)
-----------------------------------------------------------
--SELECT CASE DATEDIFF(HOUR, COMPLETED_TIME, CURRENT_TIMESTAMP) WHEN 0 THEN 'OK' ELSE 'WAIT' END DOABLE
--    ,DATEDIFF(MINUTE, CURRENT_TIMESTAMP, DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME))) NEXT_SCHEDULE_IN_MINUTES
--    ,DATEADD(MINUTE, 75, DATE_TRUNC(HOUR,COMPLETED_TIME)) NEXT_SCHEDULE_TIME 
--    ,COMPLETED_TIME LAST_COMPLETION_TIME
--    ,CURRENT_TIMESTAMP
--FROM BI._CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME;
--
-----------------------------------------------------------
-- Suspend the scheduled tasks if they are scheduled (prod DB only)
-----------------------------------------------------------
--ALTER TASK OVERALL_SINGLE_SNOW_QUERY_JOBS_SCHEDULER SUSPEND;
--SHOW TASKS;
--
-----------------------------------------------------------
-- Setup the manual reprocess starting date
-----------------------------------------------------------
UPDATE DATA_AGGREGATION_TARGETS
SET BATCH_PROCESSED = '2019-12-31'
	,BATCH_PROCESSING = NULL
WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
    AND $Reprocess;
--
-----------------------------------------------------------
-- Kick off a manual processing
-----------------------------------------------------------
-- CALL DATA_AGGREGATOR ('<target table>', <script only>, <log details>);
CALL DATA_AGGREGATOR('_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING', 0, 1);
--
-----------------------------------------------------------
-- Publish the reulst generated by manual processing (prod DB only)
-----------------------------------------------------------
--ALTER TABLE IF EXISTS ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION
--SWAP WITH _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING;
--
-----------------------------------------------------------
-- Setup the automation refreshment starting date (prod DB only)
-----------------------------------------------------------
UPDATE DATA_AGGREGATION_TARGETS
SET BATCH_PROCESSED = '2019-12-31'
	,BATCH_PROCESSING = NULL
WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
    AND $Reprocess;
--
-----------------------------------------------------------
-- Clear a temporarily blocking status caused by the failure test (Optional as needed)
-----------------------------------------------------------
UPDATE DATA_AGGREGATION_TARGETS
SET BATCH_PROCESSING = NULL
WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING';
--
-----------------------------------------------------------
-- Check the error in event log for manual processing
-----------------------------------------------------------
SELECT * FROM _CONTROL_LOGIC.DATA_AGGREGATION_LOGGING 
WHERE EVENT_STATUS NOT IN ('PASS','INFO') 
ORDER BY EVENT_TIME DESC 
LIMIT 15;
--
-----------------------------------------------------------
-- Resume the suspended tasks (prod DB only)
-----------------------------------------------------------
--SELECT SYSTEM$TASK_DEPENDENTS_ENABLE('OVERALL_SINGLE_SNOW_QUERY_JOBS_SCHEDULER');
--
--=========================================================
-- Schedule 7: Confirm the scheduled tasks and check the result
--=========================================================
--
-----------------------------------------------------------
-- Confirm the task status (prod DB only)
-----------------------------------------------------------
--SELECT * FROM _CONTROL_LOGIC.STATE_OF_THE_TASKS;
--
-----------------------------------------------------------
-- Check current batch start and the next start point will be set
-----------------------------------------------------------
SELECT A.BATCH_PROCESSED
	,MIN(B.SOURCE_READY_TIME) SOURCE_READY_TIME
FROM DATA_AGGREGATION_TARGETS A
JOIN DATA_AGGREGATION_SOURCES B
USING (TARGET_ID)
WHERE A.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
GROUP BY A.BATCH_PROCESSED;
--
-- Check current batch details and what sources will be summaried
--
SELECT A.BATCH_PROCESSED
	,A.BATCH_PROCESSING
	,B.SOURCE_READY_TIME
	,B.SOURCE_DATA
	,B.TRANSFORMATION
FROM DATA_AGGREGATION_TARGETS A
JOIN DATA_AGGREGATION_SOURCES B
USING (TARGET_ID)
WHERE A.TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
AND B.SOURCE_ENABLED = True;
--
-----------------------------------------------------------
-- Check the populated data in result table
-----------------------------------------------------------
SELECT DATA_DATE,
  COUNT(*) ROW_CNT,
  COUNT(DISTINCT PRODUCT_LINE_ID) PRODUCT_LINE_ID,
  COUNT(DISTINCT NETWORK_NAME_ID) NETWORK_CNT,
  COUNT(DISTINCT CONTRACT_ID) CONTRACT_CNT
FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING
GROUP BY DATA_DATE
ORDER BY DATA_DATE DESC
LIMIT 15
;
--
SELECT DATA_DATE, COUNT(*) CNT
FROM _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING
GROUP BY DATA_DATE
ORDER BY DATA_DATE DESC
LIMIT 15;
