--========================================
-- AGGREAGTOR PRODUCTION TASKS SETUP PROCEDURE
--========================================
--
-- USE SCHEMA BI_TEST._CONTROL_LOGIC;
USE SCHEMA BI._CONTROL_LOGIC;
--
-- Suspend the currebtly scheduled new tasks
--
ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
--
------------------------------------------
-- Remove all un-needed tasks
------------------------------------------
--
-- Suspend, resume or remove the historically scheduled old tasks
--
ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
SELECT SYSTEM$TASK_DEPENDENTS_ENABLE('OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR');
--
-- Suspend task schedule
-- ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
--
-- Root and common tasks
-- DROP TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR;
--
-- Branch For Spend
-- DROP TASK BUYSIDE_ACCOUNT_DATA_READINESS_DETECTOR;
-- DROP TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_POPULATER;
-- DROP TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER;
--
-- Branch For Revenue
-- DROP TASK SELLSIDE_ACCOUNT_DATA_READINESS_DETECTOR
-- DROP TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_POPULATER
-- DROP TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER
--
-- Branch For Commission
-- DROP TASK BUYSIDE_COMMISSION_DATA_READINESS_DETECTOR
-- DROP TASK BUYSIDE_COMMISSION_DATA_SUMMARY_POPULATER
-- DROP TASK BUYSIDE_COMMISSION_DATA_SUMMARY_PUBLISHER
--
-- Data Post processor
-- DROP TASK OVERALL_SINGLE_SNOW_QUERY_POST_PROCESSOR;
--
SHOW TASKS;
--
------------------------------------------
-- Step 6: Scheduling the automation tasks
------------------------------------------
--
-- Create root task with a schedule
DROP TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR;
CREATE OR REPLACE TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR
    WAREHOUSE = S1_BI
    SCHEDULE = 'USING CRON 15 * * * * America/Los_Angeles'
AS
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(True);
//--
//-- Create root task with a schedule
//DROP TASK BOTHSIDE_ACCOUNT_METADATA_MAPPINGS_UPDATER;
//CREATE OR REPLACE TASK BOTHSIDE_ACCOUNT_METADATA_MAPPINGS_UPDATER
//    WAREHOUSE = S1_BI
//    AFTER OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR
//AS
//CALL COMMON.UPDATE_ACCOUNT_METADATA_MAPPINGS();
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_ACCOUNT_DATA_READINESS_DETECTOR;
CREATE OR REPLACE TASK BUYSIDE_ACCOUNT_DATA_READINESS_DETECTOR
    WAREHOUSE = S1_BI
    AFTER OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR
AS
UPDATE DATA_AGGREGATION_SOURCES S
SET S.SOURCE_READY_TIME = DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1
FROM DATA_AGGREGATION_TARGETS D
WHERE S.TARGET_ID = D.TARGET_ID
AND D.TARGET_DATA = 'BI._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING';
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_POPULATER;
CREATE OR REPLACE TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR
  WAREHOUSE = S1_BI
  AFTER BUYSIDE_ACCOUNT_DATA_READINESS_DETECTOR
AS
CALL DATA_AGGREGATOR ('BI._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING', 0, 1);
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER;
CREATE OR REPLACE TASK BUYSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER
  WAREHOUSE = S1_BI
  AFTER BUYSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR
AS
ALTER TABLE IF EXISTS ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION
SWAP WITH _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION_LOADING;
--
-- Create follower task with "after" cause
DROP TASK SELLSIDE_ACCOUNT_DATA_READINESS_DETECTOR;
CREATE OR REPLACE TASK SELLSIDE_ACCOUNT_DATA_READINESS_DETECTOR
    WAREHOUSE = S1_BI
    AFTER BUYSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER
AS
UPDATE DATA_AGGREGATION_SOURCES S
SET S.SOURCE_READY_TIME = DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1
FROM DATA_AGGREGATION_TARGETS D
WHERE S.TARGET_ID = D.TARGET_ID
AND D.TARGET_DATA = '_TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING';
--
-- Create follower task with "after" cause
DROP TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_POPULATER;
CREATE OR REPLACE TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR
  WAREHOUSE = S1_BI
  AFTER SELLSIDE_ACCOUNT_DATA_READINESS_DETECTOR
AS
CALL DATA_AGGREGATOR ('_TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING', 0, 1);
--
-- Create follower task with "after" cause
DROP TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER;
CREATE OR REPLACE TASK SELLSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER
  WAREHOUSE = S1_BI
  AFTER SELLSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR
AS
ALTER TABLE IF EXISTS ACCOUNT_DATA.SELLSIDE_ACCOUNT_DATA_DAILY
SWAP WITH _TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING;
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_COMMISSION_DATA_READINESS_DETECTOR;
CREATE OR REPLACE TASK BUYSIDE_COMMISSION_DATA_READINESS_DETECTOR
    WAREHOUSE = S1_BI
    AFTER SELLSIDE_ACCOUNT_DATA_SUMMARY_PUBLISHER
AS
UPDATE DATA_AGGREGATION_SOURCES S
SET S.SOURCE_READY_TIME = DATEADD('QUARTER', -1, DATE_TRUNC('QUARTER', CURRENT_DATE())) -1
FROM DATA_AGGREGATION_TARGETS D
WHERE S.TARGET_ID = D.TARGET_ID
AND D.TARGET_DATA = 'BI._TABLE_LOADING.COMMISSIONS_LOADING';
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_COMMISSION_DATA_SUMMARY_POPULATER;
CREATE OR REPLACE TASK BUYSIDE_COMMISSION_DATA_SUMMARY_POPULATOR
  WAREHOUSE = S1_BI
  AFTER BUYSIDE_COMMISSION_DATA_READINESS_DETECTOR
AS
CALL DATA_AGGREGATOR ('BI._TABLE_LOADING.COMMISSIONS_LOADING', 0, 1);
--
-- Create follower task with "after" cause
DROP TASK BUYSIDE_COMMISSION_DATA_SUMMARY_PUBLISHER;
CREATE OR REPLACE TASK BUYSIDE_COMMISSION_DATA_SUMMARY_PUBLISHER
  WAREHOUSE = S1_BI
  AFTER BUYSIDE_COMMISSION_DATA_SUMMARY_POPULATOR
AS
ALTER TABLE IF EXISTS ACCOUNT_DATA.COMMISSIONS
SWAP WITH _TABLE_LOADING.COMMISSIONS_LOADING;
--
-- Create follower task with "after" cause
DROP TASK OVERALL_SINGLE_SNOW_QUERY_POST_PROCESSOR;
CREATE OR REPLACE TASK OVERALL_SINGLE_SNOW_QUERY_POST_PROCESSOR
  WAREHOUSE = S1_BI
  AFTER BUYSIDE_COMMISSION_DATA_SUMMARY_PUBLISHER
AS
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(true, 2);
--
-- Check the settings of all tasks
--
SHOW TASKS;
--
-------------------------------------------------------------
-- Create or replace the task status view if root task changed
-------------------------------------------------------------
--
-- Backup or Remove the old task hierarchy view
--
-- ALTER VIEW IF EXISTS STATE_OF_THE_TASKS RENAME TO STATE_OF_THE_TASKS_BACKUP;
-- DROP VIEW _CONTROL_LOGIC.STATE_OF_THE_TASKS_BACKUP;
--
-- Update the task hierarchy view
--
CREATE OR REPLACE VIEW _CONTROL_LOGIC.STATE_OF_THE_TASKS
    COMMENT = 'Display the hirarchy and status of the data processing tasks'
AS
WITH _TASK_LAST_RUN AS (
    SELECT *
    FROM (
        SELECT CONCAT(DATABASE_NAME,'.',SCHEMA_NAME,'.',NAME) AS FQ_TASK_NAME
            ,STATE STATE_OF_LAST_RUN
            ,ERROR_MESSAGE
            ,SCHEDULED_TIME
            ,COMPLETED_TIME
            ,NEXT_SCHEDULED_TIME
            ,ROW_NUMBER() OVER (PARTITION BY NAME ORDER BY SCHEDULED_TIME DESC) RN
            ,ROUND(DATEDIFF(SECOND, SCHEDULED_TIME, COMPLETED_TIME),0) DURATION_IN_SECOND
            ,CASE WHEN NAME IN (
                'BUYSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR',
                'SELLSIDE_ACCOUNT_DATA_SUMMARY_POPULATOR',
                'BUYSIDE_COMMISSION_DATA_SUMMARY_POPULATOR'
              ) THEN 'YES' ELSE '   ' END CORE_TASK
        FROM TABLE (INFORMATION_SCHEMA.TASK_HISTORY(RESULT_LIMIT => 1000))
        WHERE SCHEDULED_TIME < CURRENT_TIMESTAMP
            AND DATABASE_NAME = 'BI'
            AND STATE <> 'EXECUTING'
        )
    WHERE RN = 1
    )
  ,_TASKS AS (
//    SELECT *, CONCAT (DATABASE_NAME,'.',SCHEMA_NAME,'.',NAME) AS FQ_TASK_NAME
//    FROM TABLE (INFORMATION_SCHEMA.TASK_DEPENDENTS(
//        TASK_NAME => '_CONTROL_LOGIC.SELLSIDE_ACCOUNT_DATA_AVAILABILITY_DETECT_HOURLY',
//        RECURSIVE => TRUE
//    ))
//    UNION ALL
    SELECT *, CONCAT (DATABASE_NAME,'.',SCHEMA_NAME,'.',NAME) AS FQ_TASK_NAME
    FROM TABLE (INFORMATION_SCHEMA.TASK_DEPENDENTS(
        TASK_NAME => 'BI._CONTROL_LOGIC.OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR',
        RECURSIVE => TRUE
    )))
  ,_TASK_HIERARCHY AS (
    SELECT SYS_CONNECT_BY_PATH(NAME, ' / ') PATH
        ,FQ_TASK_NAME
        ,PREDECESSOR
        ,CONCAT(REPEAT('- ', LEVEL - 1),NAME) TASK_HIERARCHY
        ,LEVEL
    FROM _TASKS
    START WITH FQ_TASK_NAME IN (
//        'BI._CONTROL_LOGIC.SELLSIDE_ACCOUNT_DATA_AVAILABILITY_DETECT_HOURLY',
        'BI._CONTROL_LOGIC.OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR'
        )
    CONNECT BY PREDECESSOR = PRIOR FQ_TASK_NAME
    )
SELECT T.NAME TASK_NAME
  ,TH.TASK_HIERARCHY
  --,T.OWNER TASK_OWNER
  --,T.COMMENT TASK_COMMENT
  --,T.WAREHOUSE
  ,T.SCHEDULE
  ,T.STATE
  --,T.DEFINITION
  --,T.CREATED_ON
  --,T.DATABASE_NAME
  ,TLR.STATE_OF_LAST_RUN
  --,TLR.ERROR_MESSAGE
  ,TLR.CORE_TASK
  ,TLR.DURATION_IN_SECOND
  ,TLR.SCHEDULED_TIME
  ,TLR.COMPLETED_TIME
  ,TLR.NEXT_SCHEDULED_TIME
  --,T.PREDECESSOR
FROM _TASKS T
LEFT JOIN _TASK_HIERARCHY TH ON T.FQ_TASK_NAME = TH.FQ_TASK_NAME
LEFT JOIN _TASK_LAST_RUN TLR ON TLR.FQ_TASK_NAME = T.FQ_TASK_NAME
ORDER BY PATH, LEVEL;
--
-- Visuon check the task status hierarchy
--
SELECT * FROM _CONTROL_LOGIC.STATE_OF_THE_TASKS;
SELECT * FROM _CONTROL_LOGIC.STATE_OF_THE_TASKS_BACKUP;
--
-------------------------------------------------------------
-- Create or replace the last completion time view if tail task changed
-------------------------------------------------------------
--
-- Backup or Remove the old task hierarchy view
--
-- ALTER VIEW IF EXISTS DATA_AGGREGATION_COMPLETION_TIME RENAME TO DATA_AGGREGATION_COMPLETION_TIME_BACKUP;
-- DROP VIEW _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME_BACKUP;
--
create or replace view _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME
comment = 'Display the completion time of the Spend_Revenue_Commission_Aggregation chain'
as
select 'Spend_Revenue_Commission_Aggregation_Chain' Task_Stack
    ,completed_time
from table(information_schema.task_history(
    scheduled_time_range_start=>dateadd('day',-1,current_timestamp())
    ,task_name=>'BUYSIDE_COMMISSION_DATA_SUMMARY_PUBLISHER'
    ,result_limit => 30
  ))
--where database_name = 'BI'
order by completed_time desc
limit 1;
--
--
-- Visuon check the task schedule hierarchy
--
SELECT * FROM _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME;
SELECT * FROM _CONTROL_LOGIC.DATA_AGGREGATION_COMPLETION_TIME_BACKUP;
--
-------------------------------------------------------------
-- Enable the scheduled tasks
-------------------------------------------------------------
--
SELECT SYSTEM$TASK_DEPENDENTS_ENABLE('OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR');
--
SHOW TASKS;
--
------------------------------------------
-- Step 7: spot some aggregated data
------------------------------------------
SELECT DATA_TS, PRODUCT_LINE_ID, COUNT(*) CNT
FROM _TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING
GROUP BY DATA_TS, PRODUCT_LINE_ID
ORDER BY DATA_TS DESC, PRODUCT_LINE_ID;
--
SELECT DATA_TS, NETWORK_NAME_ID, COUNT(*) CNT
FROM _TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING
GROUP BY DATA_TS, NETWORK_NAME_ID
ORDER BY DATA_TS DESC;
--
SELECT *
FROM _TABLE_LOADING.SELLSIDE_ACCOUNT_DATA_DAILY_LOADING
WHERE DATA_TS = '2020-02-01'
--AND BUSINESS_UNIT_DETAIL_ID IS NULL
LIMIT 100;
--
------------------------------------------
-- Step 8: Check the aggregated data
------------------------------------------
--
-- Summary Totals Check up
--
SELECT DATA_DATE
    ,PRODUCT_LINE_ID
    ,NETWORK_NAME_ID
    ,ROUND(SUM(GROSS_REVENUE), 2) REVENUE
    ,ROUND(SUM(BUY_SPEND), 2) SPEND
    ,ROUND(SUM(COMMISSION), 2) COMMISSION
    ,ROUND(SUM(PROFIT), 2) PROFIT
FROM (
SELECT COALESCE(a.DATA_TS, b.DATA_TS,c.DATA_TS) DATA_DATE,
  COALESCE(a.PRODUCT_LINE_ID, b.PRODUCT_LINE_ID, c.PRODUCT_LINE_ID) PRODUCT_LINE_ID,
  COALESCE(a.NETWORK_NAME_ID, b.NETWORK_NAME_ID, c.NETWORK_NAME_ID) NETWORK_NAME_ID,
      a.SEARCHES,
      a.CLICKS SELL_CLICKS,
      b.IMPRESSIONS BUY_IMPRESSIONS,
      b.CLICKS BUY_CLICKS,
      ROUND(a.GROSS_REVENUE, 2) GROSS_REVENUE,
      ROUND(b.SPEND, 2) BUY_SPEND,
      ROUND(c.COMMISSION_AMOUNT, 2) COMMISSION,
      ROUND(COALESCE(a.GROSS_REVENUE,0) - COALESCE(b.SPEND,0) - COALESCE(c.COMMISSION_AMOUNT,0), 2) PROFIT
  FROM (
    SELECT DATA_TS, PRODUCT_LINE_ID, NETWORK_NAME_ID,
        COUNT(*) CNT,
        SUM(BIDDED_SEARCHES) SEARCHES,
        SUM(CLICKS) CLICKS,
        SUM(GROSS_REVENUE) GROSS_REVENUE
    FROM ACCOUNT_DATA.SELLSIDE_ACCOUNT_DATA_DAILY
    WHERE DATA_TS >= '2020-01-01'
    GROUP BY 1,2,3
    ) a
  FULL JOIN (
    SELECT DATA_DATE DATA_TS, PRODUCT_LINE_ID, NETWORK_NAME_ID,
        COUNT(*) CNT,
        SUM(IMPRESSIONS) IMPRESSIONS,
        SUM(CLICKS) CLICKS,
        SUM(SPEND) SPEND
    FROM ACCOUNT_DATA.BUYSIDE_ACCOUNT_DATA_DAILY_PRESENTATION
    GROUP BY 1,2,3
    ) b
  ON A.DATA_TS = b.DATA_TS
  AND a.PRODUCT_LINE_ID = b.PRODUCT_LINE_ID
  AND a.NETWORK_NAME_ID = b.NETWORK_NAME_ID
  FULL JOIN (
    SELECT DATA_TS, PRODUCT_LINE_ID, NETWORK_NAME_ID,
        COUNT(*) CNT,
        SUM(COMMISSION_AMOUNT) COMMISSION_AMOUNT
    FROM ACCOUNT_DATA.COMMISSIONS
    WHERE DATA_TS >= '2020-01-01'
    GROUP BY 1,2,3
    ) c
  ON COALESCE(a.DATA_TS,b.DATA_TS) = c.DATA_TS
  AND COALESCE(a.PRODUCT_LINE_ID,b.PRODUCT_LINE_ID) = c.PRODUCT_LINE_ID
  AND COALESCE(a.NETWORK_NAME_ID,b.NETWORK_NAME_ID) = c.NETWORK_NAME_ID
  ORDER BY a.DATA_TS
)
WHERE DATA_DATE >= '2020-01-01'
GROUP BY DATA_DATE
    ,PRODUCT_LINE_ID
    ,NETWORK_NAME_ID
ORDER BY DATA_DATE
    ,PRODUCT_LINE_ID
    ,NETWORK_NAME_ID
;
