--#########################################################
-- EXEC REPORT: BUYSIDE AGGREGATION TARGET SETUP SCRIPT
--#########################################################
--
-- USE SCHEMA BI_TEST._CONTROL_LOGIC;	-- for test DB
-- USE SCHEMA BI._CONTROL_LOGIC;		-- for prod DB
--
-- Suspend the scheduled tasks
--
ALTER TASK OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR SUSPEND;
--
------------------------------------------
-- Step 1: Create a target table to store summarized data
------------------------------------------
--
-- Create or Re-create the aggregation data loading table
--
-- DROP TABLE _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING;
CREATE TABLE _TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING (
	"DATA_DATE" 							DATE       NOT NULL,
	"BI_ACCOUNT_ID" 						NUMBER     NOT NULL,
	"NETWORK_NAME_ID"	 					NUMBER,
	"NETWORK_TYPE_ID"	 					NUMBER,
	"CURRENCY_CODE"	 						VARCHAR,
	"TIMEZONE"	 							VARCHAR,
	"NETWORK_CLASSIFICATION_ID" 			NUMBER,
	"NETWORK_CLASSIFICATION_SUBTYPE_ID" 	NUMBER,
	"BUSINESS_UNIT_DETAIL_ID"               NUMBER,
	"CONTRACT_ID"	 				        NUMBER,
	"CLICKS" 								NUMBER,
	"IMPRESSIONS"	 						NUMBER,
	"SPEND" 								FLOAT,
	"CONVERSION_RATE"	 					FLOAT,
	"PRODUCT_LINE_ID"	 					NUMBER
	)
CLUSTER BY (DATA_DATE)
COMMENT = 'BI-1317: Aggregate the spend data from the DataMart views directly'
;
--
------------------------------------------
-- Step 2: Config the summary table as a target
------------------------------------------
--
-- Check the current configuration
--
SELECT *
FROM DATA_AGGREGATION_TARGETS
WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING';
--
-- Delete current configuration if not in use anymore
--
--DELETE FROM DATA_AGGREGATION_TARGETS
--WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING';
--
-- Update or add the aggregation target
--
MERGE INTO DATA_AGGREGATION_TARGETS D
USING (
	SELECT 'BI-1317: Aggregate the spend data from the DataMart views directly' TARGET_LABEL
		,$1 TARGET_DATA
		,$2 BATCH_CONTROL_COLUMN
		,$3 BATCH_CONTROL_SIZE
		,$4 BATCH_CONTROL_NEXT
		,DATE_TRUNC('YEAR', CURRENT_DATE ()) - 1 BATCH_PROCESSED
		,NULL BATCH_PROCESSING
		,NULL BATCH_MICROCHUNK_CURRENT
		,$5 BATCH_SCHEDULE_TYPE
		,NULL BATCH_SCHEDULE_LAST
		,PARSE_JSON($6) PATTERN_COLUMNS
		,PARSE_JSON($7) GROUPBY_COLUMNS
		,DATA_PATTERN(PARSE_JSON($8)) GROUPBY_PATTERN
		,True GROUPBY_FLEXIBLE
		,PARSE_JSON($9) AGGREGATE_COLUMNS
		,PARSE_JSON($10) AGGREGATE_FUNCTIONS
		,PARSE_JSON($11) SUPPORT_SP_VERSIONS
	FROM VALUES (
		'_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING'
		,'DATA_DATE'
		, 131040 -- 10080: 1 week; 43200: 30 days 131040: 1 quarter
		,'DATEADD(MINUTE, :2, :1)'
		,'DAILY'
		-- all group-by columns in source data
		,'["DATA_PATTERN",
			"DATA_DATE",
			"PRODUCT_LINE_ID",
			"BI_ACCOUNT_ID",
			"NETWORK_NAME_ID",
			"NETWORK_TYPE_ID",
			"CONTRACT_ID",
			"CURRENCY_CODE",
			"CONVERSION_RATE"
		  ]'
		-- group-by columns of target data and which source column is the match
		,'["DATA_DATE:DATA_DATE",
			"PRODUCT_LINE_ID:PRODUCT_LINE_ID",
			"BI_ACCOUNT_ID:BI_ACCOUNT_ID",
			"NETWORK_NAME_ID:NETWORK_NAME_ID",
			"NETWORK_TYPE_ID:NETWORK_TYPE_ID",
			"CONTRACT_ID:CONTRACT_ID",
			"CURRENCY_CODE:CURRENCY_CODE",
			"CONVERSION_RATE:CONVERSION_RATE"
		   ]'
		-- indicators of which group-by column are needed in target table
		,'[0,1,1,1,1,1,1,1,1]'
		-- aggregate columns of target data and which aggregating column is the match
		,'["IMPRESSIONS:IMPRESSIONS",
           "CLICKS:CLICKS",
		   "SPEND:SPEND"
		   ]'
		-- what aggregation function will be used for every aggregation column
		,'["SUM(?)","SUM(?)","SUM(?)"]'
		,'["V20"]'
		)
	) S
ON D.TARGET_DATA = S.TARGET_DATA
WHEN MATCHED THEN UPDATE SET TARGET_ID = D.TARGET_ID
  ,TARGET_LABEL = S.TARGET_LABEL
  ,TARGET_DATA = S.TARGET_DATA
  ,BATCH_CONTROL_COLUMN = S.BATCH_CONTROL_COLUMN
  ,BATCH_CONTROL_SIZE = S.BATCH_CONTROL_SIZE
  ,BATCH_CONTROL_NEXT = S.BATCH_CONTROL_NEXT
  ,BATCH_PROCESSED = S.BATCH_PROCESSED
  ,BATCH_PROCESSING = S.BATCH_PROCESSING
  ,BATCH_MICROCHUNK_CURRENT = S.BATCH_MICROCHUNK_CURRENT
  ,BATCH_SCHEDULE_TYPE = S.BATCH_SCHEDULE_TYPE
  ,BATCH_SCHEDULE_LAST = S.BATCH_SCHEDULE_LAST
  ,PATTERN_COLUMNS = S.PATTERN_COLUMNS
  ,GROUPBY_COLUMNS = S.GROUPBY_COLUMNS
  ,GROUPBY_PATTERN = S.GROUPBY_PATTERN
  ,GROUPBY_FLEXIBLE = S.GROUPBY_FLEXIBLE
  ,AGGREGATE_COLUMNS = S.AGGREGATE_COLUMNS
  ,AGGREGATE_FUNCTIONS = S.AGGREGATE_FUNCTIONS
  ,SUPPORT_SP_VERSIONS = S.SUPPORT_SP_VERSIONS
WHEN NOT MATCHED THEN INSERT (
	TARGET_LABEL
	,TARGET_DATA
	,BATCH_CONTROL_COLUMN
	,BATCH_CONTROL_SIZE
	,BATCH_CONTROL_NEXT
	,BATCH_PROCESSED
	,BATCH_PROCESSING
	,BATCH_MICROCHUNK_CURRENT
	,BATCH_SCHEDULE_TYPE
	,BATCH_SCHEDULE_LAST
	,PATTERN_COLUMNS
	,GROUPBY_COLUMNS
	,GROUPBY_PATTERN
	,GROUPBY_FLEXIBLE
	,AGGREGATE_COLUMNS
	,AGGREGATE_FUNCTIONS
	,SUPPORT_SP_VERSIONS
	)
VALUES (
  S.TARGET_LABEL
	,S.TARGET_DATA
	,S.BATCH_CONTROL_COLUMN
	,S.BATCH_CONTROL_SIZE
	,S.BATCH_CONTROL_NEXT
	,S.BATCH_PROCESSED
	,S.BATCH_PROCESSING
	,S.BATCH_MICROCHUNK_CURRENT
	,S.BATCH_SCHEDULE_TYPE
	,S.BATCH_SCHEDULE_LAST
	,S.PATTERN_COLUMNS
	,S.GROUPBY_COLUMNS
	,S.GROUPBY_PATTERN
	,S.GROUPBY_FLEXIBLE
	,S.AGGREGATE_COLUMNS
	,S.AGGREGATE_FUNCTIONS
	,S.SUPPORT_SP_VERSIONS
);
--
-- Check added or modified configuration
--
SELECT *
FROM DATA_AGGREGATION_TARGETS
WHERE TARGET_DATA = '_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING';
-------------------------------------------------------------
-- Enable the scheduled tasks
-------------------------------------------------------------
SELECT SYSTEM$TASK_DEPENDENTS_ENABLE('OVERALL_SINGLE_SNOW_QUERY_LEAD_PROCESSOR');
